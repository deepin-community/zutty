/* -*- C++ -*-
 * This file is part of Zutty.
 * Copyright (C) 2020 Tom Szilagyi
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * See the file LICENSE for the full license.
 */

#ifdef DEBUG
#include <sstream>
#endif

namespace zutty
{
   inline void
   Frame::setCursorPos (uint16_t pY, uint16_t pX)
   {
      cursor.posY = pY + viewOffset;
      cursor.posX = pX;
   }

   inline void
   Frame::setCursorStyle (CharVdev::Cursor::Style cs)
   {
      cursor.style = cs;
   }

   inline void
   Frame::pageUp (uint16_t count)
   {
      uint16_t viewOffset_ = std::min (viewOffset + count, (int)historyRows);
      int delta = viewOffset_ - viewOffset;
      cursor.posY += delta;
      selection.br.y += delta;
      selection.tl.y += delta;
      viewOffset = viewOffset_;
      expose ();
   }

   inline void
   Frame::pageDown (uint16_t count)
   {
      uint16_t viewOffset_ = std::max (0, viewOffset - count);
      int delta = viewOffset_ - viewOffset;
      cursor.posY += delta;
      selection.br.y += delta;
      selection.tl.y += delta;
      viewOffset = viewOffset_;
      expose ();
   }

   inline void
   Frame::pageToBottom ()
   {
      if (!viewOffset)
         return;

      cursor.posY -= viewOffset;
      selection.br.y -= viewOffset;
      selection.tl.y -= viewOffset;
      viewOffset = 0;
      expose ();
   }

   inline void
   Frame::scrollUp (uint16_t count)
   {
      vscrollSelection (-count);
      for (uint16_t k = 0; k < count; ++k)
      {
         ++scrollHead;
         if (scrollHead == marginBottom)
            scrollHead = marginTop;
      }
      historyRows = std::min (historyRows + count, (int)saveLines);
      damage.add (marginTop * nCols, marginBottom * nCols);
   }

   inline void
   Frame::scrollDown (uint16_t count)
   {
      vscrollSelection (count);
      for (uint16_t k = 0; k < count; ++k)
      {
         if (scrollHead >= marginTop + 1)
            --scrollHead;
         else
            scrollHead = marginBottom - 1;
      }
      historyRows = std::max (0, historyRows - count);
      damage.add (marginTop * nCols, marginBottom * nCols);
   }

   inline const CharVdev::Cell &
   Frame::getCell (uint16_t pY, uint16_t pX) const
   {
      return operator [] (getIdx (pY, pX));
   }

   inline CharVdev::Cell &
   Frame::getCell (uint16_t pY, uint16_t pX)
   {
      uint32_t idx = getIdx (pY, pX);
      damage.add (idx, idx + 1);
      invalidateSelection (Rect (pX, pY));
      return operator [] (idx);
   }

   inline void
   Frame::fillCells (uint16_t ch, const CharVdev::Cell& attrs)
   {
      for (uint16_t r = 0; r < nRows; ++r)
      {
         uint32_t start = getIdx (r, 0);
         uint32_t end = start + nCols;
         for (uint32_t k = start; k < end; ++k)
         {
            cells.get () [k] = attrs;
            cells.get () [k].uc_pt = ch;
         }
         damage.add (start, end);
      }
   }

   inline void
   Frame::eraseInRow (uint16_t pY, uint16_t startX, uint16_t count,
                      const CharVdev::Cell& attrs)
   {
      if (!count)
         return;

#ifdef DEBUG
      if (nCols < startX + count || nRows <= pY)
      {
         std::ostringstream oss;
         oss << "Frame::eraseInRow (pY=" << pY << " startX=" << startX
             << " count=" << count << ") out of bounds, nCols=" << nCols
             << ", nRows=" << nRows;
         throw std::runtime_error (oss.str ());
      }
#endif
      uint32_t idx = getIdx (pY, startX);
      eraseRange (idx, idx + count, attrs);
      invalidateSelection (Rect (startX, pY, startX + count, pY));
   }

   inline void
   Frame::moveInRow (uint16_t pY, uint16_t dstX, uint16_t srcX,
                     uint16_t count)
   {
      if (!count)
         return;

#ifdef DEBUG
      if (nCols < dstX + count || nCols < srcX + count || nRows <= pY)
      {
         std::ostringstream oss;
         oss << "Frame::moveInRow (pY=" << pY << " dstX=" << dstX
             << " srcX=" << srcX << " count=" << count
             << ") out of bounds, nCols=" << nCols << ", nRows=" << nRows;
         throw std::runtime_error (oss.str ());
      }
#endif
      uint32_t dstIdx = getIdx (pY, dstX);
      uint32_t srcIdx = getIdx (pY, srcX);
      moveCells (dstIdx, srcIdx, count);
      invalidateSelection (Rect (dstX, pY, dstX + count, pY));
   }

   inline void
   Frame::copyRow (uint16_t dstY, uint16_t srcY, uint16_t startX,
                   uint16_t count)
   {
      if (!count)
         return;

#ifdef DEBUG
      if (nCols < startX + count || nRows <= dstY || nRows <= srcY)
      {
         std::ostringstream oss;
         oss << "Frame::copyRow (dstY=" << dstY << " srcY=" << srcY
             << " startX=" << startX << " count=" << count
             << ") out of bounds, nCols=" << nCols << ", nRows=" << nRows;
         throw std::runtime_error (oss.str ());
      }
#endif
      uint32_t dstIdx = getIdx (dstY, startX);
      uint32_t srcIdx = getIdx (srcY, startX);
      copyCells (dstIdx, srcIdx, count);
      invalidateSelection (Rect (startX, dstY, startX + count, dstY));
   }

   // private functions

   inline void
   Frame::invalidateSelection (const Rect&& damage)
   {
      if (selection.empty ())
         return;

      if (selection.br <= damage.tl || damage.br <= selection.tl)
         return;

      selection.clear ();
   }

   inline void
   Frame::vscrollSelection (int vertOffset)
   {
      if (selection.null ())
         return;

      int y1 = selection.tl.y + vertOffset;
      int y2 = selection.br.y + vertOffset;

      if ((margins && y1 < marginTop) || y1 < -saveLines ||
          y2 > marginBottom || (y2 == marginBottom && selection.br.x > 0))
      {
         selection.clear ();
         return;
      }

      selection.tl.y = y1;
      selection.br.y = y2;
   }

   inline int
   Frame::getPhysicalRow (int pY) const
   {
      if (pY < 0)
      {
         if (!margins)
            pY += scrollHead;
         if (pY < 0)
            pY += nRows + saveLines;
         return pY;
      }

      if (margins && (pY < marginTop || pY >= marginBottom))
         return pY;

      pY += scrollHead - marginTop;
      if (pY >= marginBottom)
         pY -= marginBottom - marginTop;

      return pY;
   }

   inline const CharVdev::Cell *
   Frame::getPhysRowPtr (int pY) const
   {
      return & operator [] (nCols * getPhysicalRow (pY));
   }

   inline const CharVdev::Cell *
   Frame::getViewRowPtr (int pY) const
   {
      return getPhysRowPtr (pY - viewOffset);
   }

   inline uint32_t
   Frame::getIdx (uint16_t pY, uint16_t pX) const
   {
#ifdef DEBUG
      if (nCols <= pX || nRows <= pY)
      {
         // N.B.: Vterm code is allowed to set pX to nCols,
         // but not allowed to dereference a cell at such a coordinate.

         std::ostringstream oss;
         oss << "Frame::getIdx (pY=" << pY << " pX=" << pX
             << ") out of bounds, nCols=" << nCols << ", nRows=" << nRows;
         throw std::runtime_error (oss.str ());
      }
#endif
      return nCols * getPhysicalRow (pY - viewOffset) + pX;
   }

   inline const CharVdev::Cell &
   Frame::operator [] (uint32_t idx) const
   {
      return cells.get () [idx];
   }

   inline CharVdev::Cell &
   Frame::operator [] (uint32_t idx)
   {
      return cells.get () [idx];
   }

   inline void
   Frame::eraseRange (uint32_t start, uint32_t end,
                      const CharVdev::Cell& attrs)
   {
      CharVdev::Cell* ca = &(cells.get () [start]);
      CharVdev::Cell*const cz = ca - start + end;
      damage.add (start, end);
      while (ca < cz)
         *ca++ = attrs;
   }

   inline void
   Frame::copyCells (uint32_t dstIx, uint32_t srcIx, uint32_t count)
   {
      memcpy (cells.get () + dstIx, cells.get () + srcIx, count * cellSize);
      damage.add (dstIx, dstIx + count);
   }

   inline void
   Frame::moveCells (uint32_t dstIx, uint32_t srcIx, uint32_t count)
   {
      memmove (cells.get () + dstIx, cells.get () + srcIx, count * cellSize);
      damage.add (dstIx, dstIx + count);
   }

   inline void
   Frame::Damage::reset ()
   {
      start = 0;
      end = 0;
   }

   inline void
   Frame::Damage::expose ()
   {
      start = 0;
      end = totalCells;
   }

   inline void
   Frame::Damage::add (uint32_t start_, uint32_t end_)
   {
      if (end_ < start_)
      {
         start_ = 0;
         end_ = totalCells;
      }

      if (start == end) // null state
      {
         start = start_;
         end = end_;
      }
      else
      {
         start = std::min (start, start_);
         end = std::max (end, end_);
      }
   }

} // namespace zutty
